/*
 * IPFS Pinning Service API
 *
 * This is the IPFS Pinning Service API. It attempts to be an implementation-agnostic API designed to be implemented by Pinning Service Providers.  This specification does **NOT** define the IPFS pinning API.  GitHub discussion around this API can be found in [ipfs/notes](https://github.com/ipfs/notes/issues/378).   **Critical Notice**  To allow backend systems behind the API to associate pins with a particular user, the API requires that a JSON Web Token is passed with requests that contains a `sub` claim (as specified by [OpenIDConnect Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)) that represents the user's identity within the backend system, so as to associate the user with their pins. This allows the backend system to use the identity as a form of reference counting on pins, therefore only removing pins once no other users have it pinned.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		Index,
	},

	{
		"PinsCidDelete",
		http.MethodDelete,
		"/pins/:cid",
		PinsCidDelete,
	},

	{
		"PinsCidGet",
		http.MethodGet,
		"/pins/:cid",
		PinsCidGet,
	},

	{
		"PinsCidPost",
		http.MethodPost,
		"/pins/:cid",
		PinsCidPost,
	},

	{
		"PinsGet",
		http.MethodGet,
		"/pins",
		PinsGet,
	},

	{
		"PinsPost",
		http.MethodPost,
		"/pins",
		PinsPost,
	},
}
